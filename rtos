实时操作系统的特征
　多任务
　有线程优先级
　多种中断级别
 
基本概念
  临界代码段：不论是硬件临界资源，还是软件临界资源，多个进程必须互斥地对它进行访问，中断处理程序和任务都会访问临界段代码，需要用关中断的方法加以保护。
  资源：任何为任务所占用的实体
  共享资源：可以被一个以上任务使用的资源
  任务：也称作一个线程，是一个简单的程序。每个任务被赋予一定的优先级，有它自己的一套CPU寄存器和自己的栈空间
      典型地，每个任务都是一个无限的循环，每个任务都处在以下五个状态下：休眠态，就绪态，运行态，挂起态，被中断态
  任务切换：将正在运行任务的当前状态（CPU寄存器中的全部内容）保存在任务自己的栈区，然后把下一个将要运行的任务的当前状态从该任务的栈中重新装入CPU的寄存器，并开始下一个任务的运行
  内核：负责管理各个任务，为每个任务分配CPU时间，并负责任务之间通讯。分为不可剥夺型内核于可剥夺型内核
  调度：内核的主要职责之一，决定轮到哪个任务运行。一般基于优先级调度法
  
关于优先级的问题
  任务优先级：分为优先级不可改变的静态优先级和优先级可改变的动态优先级
  优先级反转：优先级反转问题是实时系统中出现最多的问题。共享资源的分配可导致优先级低的任务先运行，优先级高的任务后运行。解决的办法是使用“优先级继承”算法来临时改变任务优先级，以遏制优先级反转
    当高优先级任务正等待信号量（此信号量被一个低优先级任务拥有着）的时候，一个介于两个任务优先之间的中等优先级任务开始执行——这就会导致一个高优先级任务
      在等待一个低优先级任务，而低优先级任务却无法执行类似死锁的情形发生,导致介于二者之间的毫无相关任务获得优先执行，浪费优先级高的任务的时间
    优先级继承就是为了解决优先级反转问题而提出的一种优化机制。其大致原理是让低优先级线程在获得同步资源的时候(如果有高优先级的线程也需要使用该同步资源时)，
      临时提升其优先级。以前其能更快的执行并释放同步资源。释放同步资源后再恢复其原来的优先级
      
 互斥
    虽然共享数据区简化了任务之间的信息交换，但是必须保证每个任务在处理共享共享数据时的排他性。使之满足互斥条件的一般方法有：关中断，使用测试并置位指令（TAS），禁止做任务切换，利用信号量
    中断响应时间通常被定义为：
　　中断响应时间=中断延迟时间+保存CPU状态的时间+该内核的ISR进入函数的执行时间[2]
　　中断延迟时间=MAX(关中断的最长时间，最长指令时间) + 开始执行ISR的第一条指令的时间 嵌入式中的ISR指的是中断服务处理，Interrupt Service Routines
  
分时—— 现在流行的PC，服务器都是采用这种运行模式，即把CPU的运行分成若干时间片分别处理不同的运算请求
实时—— 一般用于单片机上，比如电梯的上下控制中，对于按键等动作要求进行实时处理
